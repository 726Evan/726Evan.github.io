<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客文章</title>
    <url>/2022/01/01/%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>这里什么都没有，看看别的吧~</p>
]]></content>
  </entry>
  <entry>
    <title>C语言笔记——指针</title>
    <url>/2022/01/01/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<h2 id="指针与数组"><a href="#指针与数组" class="headerlink" title="指针与数组"></a>指针与数组</h2><h4 id="1-求数组长度"><a href="#1-求数组长度" class="headerlink" title="1.求数组长度"></a>1.求数组长度</h4><p>若定义一个数组int a[]={1,2,3,4,5}</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组总体占用字节数</span></span><br><span class="line"><span class="keyword">sizeof</span>(a)=<span class="number">20</span>；</span><br><span class="line"><span class="comment">//数组中单个元素所占字节数</span></span><br><span class="line"><span class="keyword">sizeof</span>(a[<span class="number">0</span>])=<span class="number">4</span>;</span><br><span class="line"><span class="comment">//数组中的元素个数</span></span><br><span class="line">size=<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>])=<span class="number">5</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> *p=a;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a+i);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p+i);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;a[i]);	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;*(a+i));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;*(p+i));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;*&amp;a[i]);</span><br><span class="line">	<span class="comment">//以上全部输出地址 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;----------\n&quot;</span>);</span><br><span class="line">	<span class="comment">//以下全部输出值 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(a+i));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(p+i));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(&amp;a[i]));</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>



<h4 id="数组作为函数参数"><a href="#数组作为函数参数" class="headerlink" title="数组作为函数参数"></a>数组作为函数参数</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SumOfElements</span><span class="params">(<span class="keyword">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> size=<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum+=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> total=SumOfElements(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Sum of elements = %d\n&quot;</span>,total);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="指针和字符数组"><a href="#指针和字符数组" class="headerlink" title="指针和字符数组"></a>指针和字符数组</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print1</span><span class="params">(<span class="keyword">char</span> c[])</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(c[i] != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c[i]);</span><br><span class="line">		i++;</span><br><span class="line">	 &#125; </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print2</span><span class="params">(<span class="keyword">char</span>* c)</span></span>&#123;</span><br><span class="line">    c[<span class="number">2</span>]=<span class="string">&#x27;k&#x27;</span>;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(*(c+i) != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c[i]);</span><br><span class="line">		i++;</span><br><span class="line">	 &#125; </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print3</span><span class="params">(<span class="keyword">char</span>* c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(*c != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,*c);</span><br><span class="line">		c++;</span><br><span class="line">	 &#125; </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;	</span><br><span class="line">	<span class="keyword">char</span> c[<span class="number">10</span>] = &#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">	<span class="comment">/*相当于char c[10] = &quot;hello&quot;</span></span><br><span class="line"><span class="comment">	注意字符数组以\0作为结束标志，</span></span><br><span class="line"><span class="comment">	若：char c[5] = &quot;hello&quot;则报错,</span></span><br><span class="line"><span class="comment">	应该把5改成6：char c[6] = &quot;hello&quot;</span></span><br><span class="line"><span class="comment">	 </span></span><br><span class="line"><span class="comment">	但用以下形式表示，不写\0也合法，</span></span><br><span class="line"><span class="comment">	如 char c[5] = &#123;&#x27;h&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;l&#x27;,&#x27;o&#x27;&#125;;*/</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(c)); <span class="comment">//输出字符数组的总长度 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(c)); <span class="comment">//输出字符数组中第一个&#x27;\0&#x27;之前元素的个数 </span></span><br><span class="line">	print1(c);</span><br><span class="line">	print2(c);</span><br><span class="line">	<span class="comment">/*1和2说明</span></span><br><span class="line"><span class="comment">	(charc[]) 等价于 (char *c) </span></span><br><span class="line"><span class="comment">	即c[i]与*(c+i)无条件等价 见书P237</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	while(c[i] != &#x27;\0&#x27;) 等价于 while(*(c+i) != &#x27;\0&#x27;)  */</span></span><br><span class="line">	print3(c);</span><br><span class="line">	<span class="comment">/*3说明 void print3(char* c)中的c是指向数组基地址的指针，因此可以用c++对其使用自增操作 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="指针和二维数组"><a href="#指针和二维数组" class="headerlink" title="指针和二维数组"></a>指针和二维数组</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> b[<span class="number">2</span>][<span class="number">3</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">	<span class="comment">//b是一维数组的集合，其中的每一个（共2个）一维数组都有3个整型元素 </span></span><br><span class="line">	<span class="keyword">int</span> (*p)[<span class="number">3</span>]=b;</span><br><span class="line">	<span class="comment">/*要注意它们的类型，</span></span><br><span class="line"><span class="comment">	b是一个指向一维数组（其中包含3个整型元素）的指针</span></span><br><span class="line"><span class="comment">	若 int *p=b，则p是一个指向整型的指针，类型不同会编译错误*/</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d  %d  &quot;</span>,b,&amp;b[<span class="number">0</span>]); <span class="comment">//基地址</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d  %d  %d\n&quot;</span>,*b,b[<span class="number">0</span>],&amp;b[<span class="number">0</span>][<span class="number">0</span>]); <span class="comment">//基地址 </span></span><br><span class="line">	<span class="comment">//b返回一个指向一维数组的指针，而*b返回一个指向整型的指针 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d  %d  &quot;</span>,b+<span class="number">1</span>,&amp;b[<span class="number">1</span>]); <span class="comment">//基地址+3*4 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d  %d  %d\n&quot;</span>,*(b+<span class="number">1</span>),b[<span class="number">1</span>],&amp;b[<span class="number">1</span>][<span class="number">0</span>]); <span class="comment">//基地址+3*4 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d  %d  %d\n&quot;</span>,*(b+<span class="number">1</span>)+<span class="number">2</span>,b[<span class="number">1</span>]+<span class="number">2</span>,&amp;b[<span class="number">1</span>][<span class="number">2</span>]); <span class="comment">//基地址+3*4+2*4 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d  %d  %d  %d\n&quot;</span>,*(*b+<span class="number">1</span>),*(b[<span class="number">0</span>]+<span class="number">1</span>),*&amp;b[<span class="number">0</span>][<span class="number">1</span>],b[<span class="number">0</span>][<span class="number">1</span>]); <span class="comment">//（基地址+2*4）所在地址的值</span></span><br><span class="line">	<span class="comment">//b[i][j] = *(b[i]+j) =*(*(b+i)+j) 三者等价</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\Evan\AppData\Roaming\Typora\typora-user-images\image-20211204182037732.png"></p>
<h4 id="指针和高维数组"><a href="#指针和高维数组" class="headerlink" title="指针和高维数组"></a>指针和高维数组</h4><p>高维数组本质上是 数组的数组</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fun1</span><span class="params">(<span class="keyword">int</span> *x)</span><span class="comment">//or x[]</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fun2</span><span class="params">(<span class="keyword">int</span> (*y)[<span class="number">2</span>])</span><span class="comment">//or y[][2] </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fun3</span><span class="params">(<span class="keyword">int</span> (*z)[<span class="number">2</span>][<span class="number">2</span>])</span><span class="comment">//or z[][2][2] </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*若用第二种形式需要注意</span></span><br><span class="line"><span class="comment">数组的第一个维度可以省略</span></span><br><span class="line"><span class="comment">但其余维度必须固定且对应实参*/</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">2</span>];</span><br><span class="line">	<span class="keyword">int</span> b[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">	<span class="keyword">int</span> c[<span class="number">3</span>][<span class="number">2</span>][<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line">    </span><br><span class="line">	Fun1(a);<span class="comment">//一维数组作为参数传递给函数</span></span><br><span class="line">	Fun2(b);<span class="comment">//二维数组作为参数传递给函数</span></span><br><span class="line">	Fun3(c);<span class="comment">//三维数组作为参数传递给函数</span></span><br><span class="line">		</span><br><span class="line">	<span class="keyword">int</span> (*p)[<span class="number">2</span>][<span class="number">2</span>]=c;</span><br><span class="line">	<span class="comment">//c[i][j][k]=*(c[i][j]+k)=*(*(c[i]+j)+k)=*(*(*(c+i)+j)+k)</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*(c[<span class="number">1</span>]+<span class="number">1</span>));</span><br><span class="line">	<span class="comment">//*(c[1]+1) = c[1][1] = &amp;c[1][1][0]</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h4 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h4><p>1</p>
<h5 id="怎样建立内存的动态分配"><a href="#怎样建立内存的动态分配" class="headerlink" title="怎样建立内存的动态分配"></a>怎样建立内存的动态分配</h5><p>函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span> </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b[])</span><span class="comment">//输出 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; a ; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,b[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deliever</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b[])</span><span class="comment">//赋值 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; a ; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		b[i] = i+<span class="number">1</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>malloc</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n1;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入数组的元素个数：\t&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n1);</span><br><span class="line"><span class="keyword">int</span> *A = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(n1*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">print(n1,A);<span class="comment">//未赋值前 ，存储垃圾值 </span></span><br><span class="line">deliever(n1,A);</span><br><span class="line">print(n1,A);<span class="comment">//赋值后 </span></span><br></pre></td></tr></table></figure>

<p>calloc</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入数组的元素个数：\t&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n2);</span><br><span class="line"><span class="keyword">int</span> *B = (<span class="keyword">int</span>*)<span class="built_in">calloc</span>(n2,<span class="keyword">sizeof</span>(<span class="keyword">int</span>));<span class="comment">//calloc会将分配的内存初始化 </span></span><br><span class="line">print(n2,B);<span class="comment">//未赋值前，已经初始化 </span></span><br><span class="line">deliever(n2,B);</span><br><span class="line">print(n2,B);<span class="comment">//赋值后</span></span><br></pre></td></tr></table></figure>

<p>realloc</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n3;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入数组的元素个数：\t&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n3);</span><br><span class="line"><span class="keyword">int</span> *C = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(n3*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">print(n3,C);</span><br><span class="line">deliever(n3,C);</span><br><span class="line">print(n3,C);</span><br><span class="line"><span class="keyword">int</span> *CC = (<span class="keyword">int</span>*)<span class="built_in">realloc</span>(C,<span class="number">2</span>*n3*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));<span class="comment">//将内存大小扩展为原来的两倍 </span></span><br><span class="line">print(<span class="number">2</span>*n3,CC);<span class="comment">//扩展后的内存中的新内存部分仍然是垃圾值（若用calloc，则显示初始化后的值） </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>free</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n4;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入数组的元素个数：\t&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n4);</span><br><span class="line"><span class="keyword">int</span> *D = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(n4*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">print(n4,D);</span><br><span class="line">deliever(n4,D);</span><br><span class="line">print(n4,D);</span><br><span class="line"><span class="built_in">free</span>(D);<span class="comment">//free释放内存，若不释放可能导致内存泄露、程序崩溃 </span></span><br><span class="line">print(n4,D);</span><br><span class="line"></span><br><span class="line">D[n4<span class="number">-1</span>] = <span class="number">111</span>;	D[n4<span class="number">-2</span>] = <span class="number">222</span>;	D[n4<span class="number">-3</span>] = <span class="number">333</span>;</span><br><span class="line">print(n4,D);<span class="comment">//free之后依然可以修改 原内存的值的 所在地址的值 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C语言</category>
        <category>指针</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>指针</tag>
      </tags>
  </entry>
  <entry>
    <title>友情链接</title>
    <url>/2022/01/02/%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<p>这是 <a href="https://jinkuihua.github.io/">小潘同学</a> 的网站，欢迎去围观~</p>
]]></content>
      <tags>
        <tag>友情链接</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/01/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
