{"meta":{"title":"Evan","subtitle":"","description":"去樱顶看一次日出吧，看朝晖穿过薄雾洒在珞珈山上","author":"Evan","url":"https://726Evan.github.io","root":"/"},"pages":[{"title":"关于这里","date":"2022-01-02T09:21:18.000Z","updated":"2022-01-05T13:37:24.336Z","comments":true,"path":"about/index.html","permalink":"https://726evan.github.io/about/index.html","excerpt":"","text":"hi 很高兴与你相遇，我是Evan，这是我的第一个个人网站。 它暂时看起来有些门可罗雀，许多功能做了很久但并未达到预期效果，而且不少的操作都是基于现有的hexo框架，“自研率”不高。不过作为一名小白初次尝试的成果，它对我而言可能更偏向于一本特殊的日记本，本子上的内容比本子本身更加重要。而且在它慢慢建成起来的这段时间里，我对于命令行、计算机网络的相关知识可以说有所了解、有所实践，补足了一点点知识广度上的欠缺，也算作向着计算机领域的一次探索，待下学期深入相关学习后再考虑自己造轮子吧。 说到内容，不少人都有写日记的习惯， 记录生活、回忆生活。其实做网站也是一样，只是从纸张上的一撇一捺变为键盘上的一c一v（bushi)。感谢互联网给我留下了一片属于自己的小空间，离我很远，却触手可及。不出意外的话，我应该会在这里分享我的一些笔记、学习历程、或者其他乱七八糟的东西，欢迎大家来瞎逛交流🤗。"},{"title":"分类","date":"2022-01-01T15:45:57.000Z","updated":"2022-01-06T07:40:06.958Z","comments":false,"path":"categories/index.html","permalink":"https://726evan.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-01-01T15:25:12.000Z","updated":"2022-01-06T07:39:56.874Z","comments":false,"path":"tags/index.html","permalink":"https://726evan.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"2022","slug":"2022","date":"2022-01-31T15:45:06.000Z","updated":"2022-01-31T15:49:34.062Z","comments":true,"path":"2022/01/31/2022/","link":"","permalink":"https://726evan.github.io/2022/01/31/2022/","excerpt":"","text":"虎年将至，祝大家幸福安康~","categories":[],"tags":[]},{"title":"苏丹政变循环","slug":"苏丹政变循环","date":"2022-01-18T05:31:13.000Z","updated":"2022-01-25T13:32:46.892Z","comments":true,"path":"2022/01/18/苏丹政变循环/","link":"","permalink":"https://726evan.github.io/2022/01/18/%E8%8B%8F%E4%B8%B9%E6%94%BF%E5%8F%98%E5%BE%AA%E7%8E%AF/","excerpt":"马克思曾补充黑格尔说过这样一句话：一切重大的历史事件和人物，都出现两次，第一次是悲剧，第二次是闹剧。那么，当同样的剧情出现第三次、甚至第四次时，它又是什么呢？苏丹独立的66年里，有40年都在打内战，期间经历了五次政变和三代军事独裁统治。每一个独裁者，都失败得“各有特色”，他们刚上台时都胸怀壮志，都发誓要从危机中拯救国家，试图推进一些改革，取得有限的经济发展。然而，一旦坐稳了位置，他们又会背叛自己最初的阶级，为了手中的权力开历史倒车，变成维护既得利益、阻碍进步的反动力量。","text":"马克思曾补充黑格尔说过这样一句话：一切重大的历史事件和人物，都出现两次，第一次是悲剧，第二次是闹剧。那么，当同样的剧情出现第三次、甚至第四次时，它又是什么呢？苏丹独立的66年里，有40年都在打内战，期间经历了五次政变和三代军事独裁统治。每一个独裁者，都失败得“各有特色”，他们刚上台时都胸怀壮志，都发誓要从危机中拯救国家，试图推进一些改革，取得有限的经济发展。然而，一旦坐稳了位置，他们又会背叛自己最初的阶级，为了手中的权力开历史倒车，变成维护既得利益、阻碍进步的反动力量。 国家在现代化过程中，必然会因为利益分配不均，引发利益集团的反弹。现代政党的一个功能，就是协调各方利益集团的矛盾。然而，英国、埃及的殖民遗产，给苏丹留下了有限的官僚体制，和一个强势的军事集团，却没有留下一套成熟的政党体系。殖民者的“分而治之”，导致松散的部落，依然是这个国家最基层的组织形式，空被套上了一层“政党”的外壳。苏丹主要的反对派，叫“自由与变革力量联盟”，就是22个反对派团体组成的松散联合体。独裁者一垮台，马上就因为分赃不均，暴露出了大量矛盾。统一的国族认同，非但没有因“民主”而产生，反倒被排他的部族意识所割裂。只有一个能超越教派、种族和区域局限性的存在，才能将国家真正拧成一股绳。 早已失去信任的苏丹文官集团，由于受到军方迫害，威望开始“触底反弹”。但从长远来看，既然经济的困境，能压垮一个巴希尔政权，那就同样能左右这个过渡政府的命运。 1978年，苏丹的人均GDP是中国的三倍。今天，中国的人均GDP早已突破一万美元，而苏丹却还不到600美元，跟阿富汗一个水平。巴希尔时代的石油繁荣，让这个国家的人口，从世纪初的2600万，增长到4400万。而现在的苏丹，既拿不出任何可以出口的东西，还要从国外进口海量的粮食，还欠下了500多亿美元还不上的外债，投资价值无限接近于0。它的困局，恐怕已经不是换个体制、换个政府，就能变好的问题。再不找到新的经济增长点，苏丹的全面社会崩溃也只是个时间问题。到时候，留给苏丹的，恐怕就只有马克思、马尔萨斯和马克沁，这三驾“马”车了。 【节选自谷智轩】","categories":[],"tags":[{"name":"politics","slug":"politics","permalink":"https://726evan.github.io/tags/politics/"}]},{"title":"友情链接","slug":"友情链接","date":"2022-01-02T07:15:32.000Z","updated":"2022-01-02T14:46:04.753Z","comments":true,"path":"2022/01/02/友情链接/","link":"","permalink":"https://726evan.github.io/2022/01/02/%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/","excerpt":"","text":"这是 小潘同学 的网站，欢迎去围观~","categories":[],"tags":[{"name":"友情链接","slug":"友情链接","permalink":"https://726evan.github.io/tags/%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/"}]},{"title":"C语言笔记——指针","slug":"C语言笔记——指针","date":"2022-01-01T15:35:11.000Z","updated":"2022-01-04T06:08:44.784Z","comments":true,"path":"2022/01/01/C语言笔记——指针/","link":"","permalink":"https://726evan.github.io/2022/01/01/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%8C%87%E9%92%88/","excerpt":"指针与数组求数组长度若定义一个数组int a[]={1,2,3,4,5}","text":"指针与数组求数组长度若定义一个数组int a[]={1,2,3,4,5} 123456//数组总体占用字节数sizeof(a)=20；//数组中单个元素所占字节数sizeof(a[0])=4;//数组中的元素个数size=sizeof(a)/sizeof(a[0])=5 指针和数组1234567891011121314151617181920#include&lt;stdio.h&gt;int main()&#123; int a[]=&#123;1,2,3,4,5&#125;; int i=0; int *p=a; printf(&quot;%d\\n&quot;,a+i); printf(&quot;%d\\n&quot;,p+i); printf(&quot;%d\\n&quot;,&amp;a[i]); printf(&quot;%d\\n&quot;,&amp;*(a+i)); printf(&quot;%d\\n&quot;,&amp;*(p+i)); printf(&quot;%d\\n&quot;,&amp;*&amp;a[i]); //以上全部输出地址 printf(&quot;----------\\n&quot;); //以下全部输出值 printf(&quot;%d\\n&quot;,a[i]); printf(&quot;%d\\n&quot;,*(a+i)); printf(&quot;%d\\n&quot;,*(p+i)); printf(&quot;%d\\n&quot;,*(&amp;a[i])); &#125; 数组作为函数参数12345678910111213141516int SumOfElements(int a[])&#123; int i,sum=0; int size=sizeof(a)/sizeof(a[0]); for(i=0;i&lt;size;i++) &#123; sum+=a[i]; &#125; return sum;&#125;int main()&#123; int a[]=&#123;1,2,3,4,5&#125;; int total=SumOfElements(a); printf(&quot;Sum of elements = %d\\n&quot;,total);&#125; 指针和字符数组1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;stdio.h&gt;#include&lt;string.h&gt;void print1(char c[])&#123; int i=0; while(c[i] != &#x27;\\0&#x27;)&#123; printf(&quot;%c&quot;,c[i]); i++; &#125; printf(&quot;\\n&quot;);&#125;void print2(char* c)&#123; c[2]=&#x27;k&#x27;; int i=0; while(*(c+i) != &#x27;\\0&#x27;)&#123; printf(&quot;%c&quot;,c[i]); i++; &#125; printf(&quot;\\n&quot;);&#125;void print3(char* c)&#123; while(*c != &#x27;\\0&#x27;)&#123; printf(&quot;%c&quot;,*c); c++; &#125; printf(&quot;\\n&quot;);&#125;int main()&#123; char c[10] = &#123;&#x27;h&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;l&#x27;,&#x27;o&#x27;,&#x27;\\0&#x27;&#125;; /*相当于char c[10] = &quot;hello&quot; 注意字符数组以\\0作为结束标志， 若：char c[5] = &quot;hello&quot;则报错, 应该把5改成6：char c[6] = &quot;hello&quot; 但用以下形式表示，不写\\0也合法， 如 char c[5] = &#123;&#x27;h&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;l&#x27;,&#x27;o&#x27;&#125;;*/ printf(&quot;%d\\n&quot;,sizeof(c)); //输出字符数组的总长度 printf(&quot;%d\\n&quot;,strlen(c)); //输出字符数组中第一个&#x27;\\0&#x27;之前元素的个数 print1(c); print2(c); /*1和2说明 (charc[]) 等价于 (char *c) 即c[i]与*(c+i)无条件等价 见书P237 while(c[i] != &#x27;\\0&#x27;) 等价于 while(*(c+i) != &#x27;\\0&#x27;) */ print3(c); /*3说明 void print3(char* c)中的c是指向数组基地址的指针，因此可以用c++对其使用自增操作 */&#125; 指针和二维数组123456789101112131415161718#include&lt;stdio.h&gt;int main()&#123; int b[2][3]=&#123;1,2,3,4,5,6&#125;; //b是一维数组的集合，其中的每一个（共2个）一维数组都有3个整型元素 int (*p)[3]=b; /*要注意它们的类型， b是一个指向一维数组（其中包含3个整型元素）的指针 若 int *p=b，则p是一个指向整型的指针，类型不同会编译错误*/ printf(&quot;%d %d &quot;,b,&amp;b[0]); //基地址 printf(&quot;%d %d %d\\n&quot;,*b,b[0],&amp;b[0][0]); //基地址 //b返回一个指向一维数组的指针，而*b返回一个指向整型的指针 printf(&quot;%d %d &quot;,b+1,&amp;b[1]); //基地址+3*4 printf(&quot;%d %d %d\\n&quot;,*(b+1),b[1],&amp;b[1][0]); //基地址+3*4 printf(&quot;%d %d %d\\n&quot;,*(b+1)+2,b[1]+2,&amp;b[1][2]); //基地址+3*4+2*4 printf(&quot;%d %d %d %d\\n&quot;,*(*b+1),*(b[0]+1),*&amp;b[0][1],b[0][1]); //（基地址+2*4）所在地址的值 //b[i][j] = *(b[i]+j) =*(*(b+i)+j) 三者等价 return 0;&#125; 指针和高维数组高维数组本质上是 数组的数组 12345678910111213141516171819202122232425262728#include&lt;stdio.h&gt;void Fun1(int *x)//or x[]&#123;&#125;void Fun2(int (*y)[2])//or y[][2] &#123;&#125;void Fun3(int (*z)[2][2])//or z[][2][2] &#123;&#125; /*若用第二种形式需要注意数组的第一个维度可以省略但其余维度必须固定且对应实参*/ int main()&#123; int a[2]; int b[2][2]; int c[3][2][2]=&#123;1,2,3,4,5,6,7,8,9,10,11,12&#125;; Fun1(a);//一维数组作为参数传递给函数 Fun2(b);//二维数组作为参数传递给函数 Fun3(c);//三维数组作为参数传递给函数 int (*p)[2][2]=c; //c[i][j][k]=*(c[i][j]+k)=*(*(c[i]+j)+k)=*(*(*(c+i)+j)+k) printf(&quot;%d&quot;,*(c[1]+1)); //*(c[1]+1) = c[1][1] = &amp;c[1][1][0] return 0;&#125; 动态内存分配1 怎样建立内存的动态分配函数 12345678910111213141516171819#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt; void print(int a,int b[])//输出 &#123; printf(&quot;\\n&quot;); for(int i = 0 ; i &lt; a ; i++) &#123; printf(&quot;%d &quot;,b[i]); &#125; printf(&quot;\\n&quot;);&#125;void deliever(int a,int b[])//赋值 &#123; for(int i = 0 ; i &lt; a ; i++) &#123; b[i] = i+1 ; &#125;&#125; malloc 1234567int n1;printf(&quot;请输入数组的元素个数：\\t&quot;);scanf(&quot;%d&quot;,&amp;n1);int *A = (int*)malloc(n1*sizeof(int));print(n1,A);//未赋值前 ，存储垃圾值 deliever(n1,A);print(n1,A);//赋值后 calloc 1234567int n2;printf(&quot;请输入数组的元素个数：\\t&quot;);scanf(&quot;%d&quot;,&amp;n2);int *B = (int*)calloc(n2,sizeof(int));//calloc会将分配的内存初始化 print(n2,B);//未赋值前，已经初始化 deliever(n2,B);print(n2,B);//赋值后 realloc 12345678910int n3;printf(&quot;请输入数组的元素个数：\\t&quot;);scanf(&quot;%d&quot;,&amp;n3);int *C = (int*)malloc(n3*sizeof(int));print(n3,C);deliever(n3,C);print(n3,C);int *CC = (int*)realloc(C,2*n3*sizeof(int));//将内存大小扩展为原来的两倍 print(2*n3,CC);//扩展后的内存中的新内存部分仍然是垃圾值（若用calloc，则显示初始化后的值） free 12345678910111213int n4;printf(&quot;请输入数组的元素个数：\\t&quot;);scanf(&quot;%d&quot;,&amp;n4);int *D = (int*)malloc(n4*sizeof(int));print(n4,D);deliever(n4,D);print(n4,D);free(D);//free释放内存，若不释放可能导致内存泄露、程序崩溃 print(n4,D);D[n4-1] = 111; D[n4-2] = 222; D[n4-3] = 333;print(n4,D);//free之后依然可以修改 原内存的值的 所在地址的值","categories":[{"name":"C语言","slug":"C语言","permalink":"https://726evan.github.io/categories/C%E8%AF%AD%E8%A8%80/"},{"name":"指针","slug":"C语言/指针","permalink":"https://726evan.github.io/categories/C%E8%AF%AD%E8%A8%80/%E6%8C%87%E9%92%88/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"https://726evan.github.io/tags/C%E8%AF%AD%E8%A8%80/"},{"name":"指针","slug":"指针","permalink":"https://726evan.github.io/tags/%E6%8C%87%E9%92%88/"}]},{"title":"博客文章","slug":"博客文章","date":"2022-01-01T12:50:47.000Z","updated":"2022-01-02T14:44:31.538Z","comments":true,"path":"2022/01/01/博客文章/","link":"","permalink":"https://726evan.github.io/2022/01/01/%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/","excerpt":"","text":"这里什么都没有，看看别的吧~","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-01-01T11:57:36.767Z","updated":"2022-01-04T06:05:21.430Z","comments":true,"path":"2022/01/01/hello-world/","link":"","permalink":"https://726evan.github.io/2022/01/01/hello-world/","excerpt":"快速上手——网站的基础操作创建新文章1$ hexo new &quot;My New Post&quot;","text":"快速上手——网站的基础操作创建新文章1$ hexo new &quot;My New Post&quot; 更多请点击: Writing 本地运行1$ hexo server 更多请点击: Server 生成静态文件1$ hexo generate 更多请点击: Generating 部署到远程站点1$ hexo deploy 更多请点击: Deployment 本网站的框架为 Hexo，点击可访问Hexo的 GitHub. 关于Hexo的详细文档 documentation 关于Hexo的故障排除 troubleshooting","categories":[],"tags":[]}],"categories":[{"name":"C语言","slug":"C语言","permalink":"https://726evan.github.io/categories/C%E8%AF%AD%E8%A8%80/"},{"name":"指针","slug":"C语言/指针","permalink":"https://726evan.github.io/categories/C%E8%AF%AD%E8%A8%80/%E6%8C%87%E9%92%88/"}],"tags":[{"name":"politics","slug":"politics","permalink":"https://726evan.github.io/tags/politics/"},{"name":"友情链接","slug":"友情链接","permalink":"https://726evan.github.io/tags/%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/"},{"name":"C语言","slug":"C语言","permalink":"https://726evan.github.io/tags/C%E8%AF%AD%E8%A8%80/"},{"name":"指针","slug":"指针","permalink":"https://726evan.github.io/tags/%E6%8C%87%E9%92%88/"}]}